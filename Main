#include "mbed.h"

//ultrasonic sensor
DigitalOut trig1(PTA1);                               //D3
DigitalOut echo1(PTB9);                               //D2


DigitalOut trig2(PTA2);                               //D5
DigitalOut echo2(PTB23);                              //D4
//steering motor
DigitalOut mot_dir(PTC2);                             //D6
PwmOut m_enable(PTC3);    //                          //D7
AnalogIn potpin(PTB3);                                //A1
float potvalue;

//bldc motor
AnalogOut dac(DAC0_OUT);

//BRAKING
DigitalOut CW(PTC12);                                  //D8
DigitalOut CCW(PTC4);                                  //D9
DigitalOut ENABLE(PTC2);                             //D10

//linescan camera
DigitalOut clk(PTD3);                                //D12
DigitalOut SI(PTD1);                                 //D13
AnalogIn Aout(PTB2);                                  //A0
Serial pc(USBTX,USBRX);
AnalogOut dac(DAC0_OUT);

//initialization
//linescan cam
int pixel[128];
int i;
int a[128];
int a1[8];
int sensorvalue;

//ultrasonic sensor
int distance,correction=0;
Timer sonar;
float p=0;
float n;


////***function definitions***
int getdistance();
int linescan();
void stop_centre();
void t_left();
void t_right();
void bringback2centre();
void applybrake();

void discontinuousmode(float n);


//main program
int main()  {

int *avgvalues;
    
    avgvalues=linescan();
    

   
    
    //lane adjust to centre-111 000-11
 if((a1[0]>102) && (a1[1]>102) && (a1[2]>102) && (a1[3]<102) && (a1[4]<102) && (a1[5]>102) && (a1[6]>102) && (a1[7]>102) )
 {
     bringback2centre();
     }
     
     //stop the vehicle-001-111-00
     if((a1[0]<102) && (a1[1]<102) && (a1[2]>102) && (a1[3]>102) && (a1[4]>102) && (a1[5]>102) && (a1[6]<102) &&(a1[7]<102) )
 {
     dac=0;
     //4 breaking;
     centrestop();
     }
     
     //turn the vehicle right-000-000-00
     if((a1[0]<102) && (a1[1]<102) && (a1[2]<102) && (a1[3]<102) && (a1[4]<102) && (a1[5]<102) && (a1[6]<102) &&(a1[7]<102) )
 {
     pc.printf("right & black");
     AnalogOut aout=//?
     turnright();
     wait(2);
     bringback2centre();
     }
     
     //low speed-2kmph-001-001-00
     if((a1[0]<102) && (a1[1]<102) && (a1[2]>102) && (a1[3]<102) && (a1[4]<102) && (a1[5]>102) && (a1[6]<102) &&(a1[7]<102) )
 {
     aout=0.1;
     centrestop();
        
        //discntue..
        if((a1[0]+102) && (a1[1]102) && (a1[2]+102) && (a1[3]+102) && (a1[4]+102) && (a1[5]+102) && (a1[6]+102) &&(a1[7]+102) 
        || ((a1[0]$102) && (a1[1]$102) && (a1[2]$102) && (a1[3]$102) && (a1[4]$102) && (a1[5]$102) && (a1[6]$102) &&(a1[7]$102) ))
        
        {
            discontinuousmode(0.03);
            }
            
     }
     
     //medium speed-5kmph
     if((a1[0]<102) && (a1[1]<102) && (a1[2]>102) && (a1[3]<102) && (a1[4]>102) && (a1[5]<102) && (a1[6]<102) &&(a1[7]<102) )
 {
     dac=0.13;
     centrestop();
     
     
        if((a1[0]+102) && (a1[1]+102) && (a1[2]+102) && (a1[3]+102) && (a1[4]+102) && (a1[5]+102) && (a1[6]+102) &&(a1[7]+102) 
        || ((a1[0]$102) && (a1[1]$102) && (a1[2]$102) && (a1[3]$102) && (a1[4]$102) && (a1[5]$102) && (a1[6]$102) &&(a1[7]$102) ))
        
        {
            discontinuousmode(0.16);
            }
     
        
     }
     
     
    //high speed-10kmph
    if((a1[0]<102) && (a1[1]<102) && (a1[2]>102) && (a1[3]>102) && (a1[4]<102) && (a1[5]<102) && (a1[6]<102) &&(a1[7]<102) )
 {
     dac=0.3;
     centrestop();
     
      
        if((a1[0]+102) && (a1[1]+102) && (a1[2]+102) && (a1[3]+102) && (a1[4]+102) && (a1[5]+102) && (a1[6]+102) &&(a1[7]+102) 
        || ((a1[0]$102) && (a1[1]$102) && (a1[2]$102) && (a1[3]$102) && (a1[4]$102) && (a1[5]$102) && (a1[6]$102) &&(a1[7]$102) ))
        
        {
            discontinuousmode(0.3);
            }
     
    
    
     }
     
     }
     else
     {
         applybrake();
         }
     }
     
     
    
     
     
     //linescan camera function definition
     int linescan()
     {
    
    //start pixel count
     SI=1;
    clk=1;
    SI=0;
    clk=0;
    for(i=0;i<128;i++)
    {
        clk=1;
        clk=0;
         }
        while(1)
        {
            sensorvalue=Aout.read_u16();
            SI=1;
            clk=1;
            SI=0;
            clk=0;
            for(i=0;i<128;i++)
            {
                wait_us(100);
                a[i]=Aout.read_u16();
                pixel[i]=a[i]/256;
                clk=1;
                clk=0;
                }
 
   a1[0]=(pixel[0]+pixel[1]+pixel[2]+pixel[3]+pixel[4]+pixel[5]+pixel[6]+pixel[7]+pixel[8]+pixel[9]+pixel[10]+pixel[11]+pixel[12]+pixel[13]+pixel[14]+pixel[15])/16;
   pc.printf("0=%d\r\n",a1[0]);
   a1[1]=(pixel[16]+pixel[17]+pixel[18]+pixel[19]+pixel[20]+pixel[21]+pixel[22]+pixel[23]+pixel[24]+pixel[25]+pixel[26]+pixel[27]+pixel[28]+pixel[29]+pixel[30]+pixel[31])/16;
    pc.printf("1=%d\r\n",a1[1]);
    a1[2]=(pixel[32]+pixel[33]+pixel[34]+pixel[35]+pixel[36]+pixel[37]+pixel[38]+pixel[39]+pixel[40]+pixel[41]+pixel[42]+pixel[43]+pixel[44]+pixel[45]+pixel[46]+pixel[47])/16;
    pc.printf("2=%d\r\n",a1[2]);      
     a1[3]=(pixel[48]+pixel[49]+pixel[50]+pixel[51]+pixel[52]+pixel[53]+pixel[54]+pixel[55]+pixel[56]+pixel[57]+pixel[58]+pixel[59]+pixel[60]+pixel[61]+pixel[62]+pixel[63])/16;    
        pc.printf("3=%d\r\n",a1[3]); 
        a1[4]=(pixel[64]+pixel[65]+pixel[66]+pixel[67]+pixel[68]+pixel[69]+pixel[70]+pixel[71]+pixel[72]+pixel[73]+pixel[74]+pixel[75]+pixel[76]+pixel[77]+pixel[78]+pixel[79])/16;
    pc.printf("4=%d\r\n",a1[4]);
        a1[5]=(pixel[80]+pixel[81]+pixel[82]+pixel[83]+pixel[84]+pixel[85]+pixel[86]+pixel[87]+pixel[88]+pixel[89]+pixel[90]+pixel[91]+pixel[92]+pixel[93]+pixel[94]+pixel[95])/16;
    pc.printf("5=%d\r\n",a1[5]);
        a1[6]=(pixel[96]+pixel[97]+pixel[98]+pixel[99]+pixel[100]+pixel[101]+pixel[102]+pixel[103]+pixel[104]+pixel[105]+pixel[106]+pixel[107]+pixel[108]+pixel[109]+pixel[110]+pixel[111])/16;
    pc.printf("6=%d\r\n",a1[6]);
        a1[7]=(pixel[112]+pixel[113]+pixel[114]+pixel[115]+pixel[116]+pixel[117]+pixel[118]+pixel[119]+pixel[120]+pixel[121]+pixel[122]+pixel[123]+pixel[124]+pixel[125]+pixel[126]+pixel[127])/16;
    pc.printf("7=%d\r\n",a1[7]);
    
    return(a1);
    
    }
    }
    
    //function definition for ultrasonic sensor
    int getdistance() {
     
     {
    sonar.reset();
                    // measure actual software polling timer delays
                    // delay used later in time correction
                    // start timer
    sonar.start();
                    // min software polling delay to read echo pin
    while (echo==2) {};
   
                    // stop timer
    sonar.stop();
                    // read timer
    correction = sonar.read_us();
    printf("Approximate software overhead timer delay is %d uS\n\r",correction);
 
                    //Loop to read Sonar distance values, scale, and print
    while(1) {
                    // trigger sonar to send a ping
        trigger = 1;
        sonar.reset();
        wait_us(10.0);
        trigger = 0;
        
                    //wait for echo high
        while (echo==0) {};
        
                    //echo high, so start timer
        sonar.start();
                    //wait for echo low
        while (echo==1) {};
                    //stop timer and read value
        sonar.stop();
                    //subtract software overhead timer delay and scale to cm
        distance = (sonar.read_us()-correction)/58.0;
        myled2 = 0;
        printf(" %d cm \n\r",distance);
                    //wait so that any echo(s) return before sending another ping
        wait(0.2);

        return(distance);
        }
        
//function definitions for steering
void t_left()    {
    
    mot_dir=1;
    mot_enable=0.3;
    wait(3);
    mot_enable=0;
    wait(2);
    }
    
void t_right()   {
        
    mot_dir=0;
    mot_enable=0.3;
    wait(3);
    mot_enable=0;
    wait(2);
    
    }   
        
void stop_centre()   
{
    mot_enable=0;
    wait(2);
    }
    
void bringback2centre()
{
    
 //function definition for HOMEPOSIITON
 

    potvalue=potpin;
    pc.printf("potvalues=%f\t",potvalue);
                   
                    if(potvalue>=500 && potvalue <=600)
                    {
                     stop_centre();
  
                     }

                    else{
                      if(potvalue>600)
                        {
                          t_left();
                          wait(2);
                           if(potvalue>=500 && potvalue<=600)
                                {
                               stop_centre();
                                }
    
                         }
                      else
                       {
                       t_right();
                        wait(2);
                          if(potvalue>=500 && potvalue<=600)
                           {
                          stop_centre();
                            }

                            }
                          }
                          
                          
//function definition 4 discontinuous mode
void discontinuousmode(float n)   {
    
                dac=n;
                }
                
                
void applybrake()   {
                dac=0;
        CW=1;
        CCW=0;
        ENABLE=1;
        wait(3);
        CW=0;
        CCW=1;
        ENABLE=1;
        wait(3);
        ENABLE=0;
        }
                
}
